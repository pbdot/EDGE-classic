#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i depth.glsl -o depth.h -l glsl330

    Overview:

        Shader program 'depth':
            Get shader desc: depth_shader_desc(sg_query_backend());
            Vertex shader: depth_vs
                Attribute slots:
                    ATTR_depth_vs_v_pos = 0
                Uniform block 'depth_vs_params':
                    C struct: depth_vs_params_t
                    Bind slot: SLOT_depth_vs_params = 0
            Fragment shader: depth_fs
                Uniform block 'depth_fs_params':
                    C struct: depth_fs_params_t
                    Bind slot: SLOT_depth_fs_params = 0


    Shader descriptor structs:

        sg_shader depth = sg_make_shader(depth_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'depth_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_depth_vs_v_pos] = { ... },
                },
            },
            ...});


    Image bind slots, use as index in sg_bindings.vs.images[] or .fs.images[]


    Sampler bind slots, use as index in sg_bindings.vs.sampler[] or .fs.samplers[]


    Bind slot and C-struct for uniform block 'depth_vs_params':

        depth_vs_params_t depth_vs_params = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_depth_vs_params, &SG_RANGE(depth_vs_params));

    Bind slot and C-struct for uniform block 'depth_fs_params':

        depth_fs_params_t depth_fs_params = {
            .u_far = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_depth_fs_params, &SG_RANGE(depth_fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_depth_vs_v_pos (0)
#define SLOT_depth_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct depth_vs_params_t {
    float mvp[16];
} depth_vs_params_t;
#pragma pack(pop)
#define SLOT_depth_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct depth_fs_params_t {
    float u_far;
    uint8_t _pad_4[12];
} depth_fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 depth_vs_params[4];
    layout(location = 0) in vec4 v_pos;
    out vec3 position;
    
    void main()
    {
        gl_Position = mat4(depth_vs_params[0], depth_vs_params[1], depth_vs_params[2], depth_vs_params[3]) * v_pos;
        position = gl_Position.xyz;
    }
    
*/
static const char depth_vs_source_glsl330[265] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x65,0x70,0x74,0x68,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x5f,0x70,0x6f,
    0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x64,0x65,0x70,0x74,
    0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x5f,
    0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,
    0x78,0x79,0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 depth_fs_params[1];
    layout(location = 0) out vec4 frag_color;
    in vec3 position;
    
    vec4 float_to_rgba(float v)
    {
        vec4 _27 = fract(vec4(1.0, 255.0, 65025.0, 160581376.0) * v);
        return (-_27.yzww) * vec4(0.0039215688593685626983642578125, 0.0039215688593685626983642578125, 0.0039215688593685626983642578125, 0.0) + _27;
    }
    
    vec4 depth_to_rgba(vec3 pos)
    {
        return float_to_rgba(clamp(length(pos / vec3(depth_fs_params[0].x)), 0.0, 1.0));
    }
    
    void main()
    {
        vec3 param = position;
        frag_color = depth_to_rgba(param);
    }
    
*/
static const char depth_fs_source_glsl330[557] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x65,0x70,0x74,0x68,
    0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x34,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x5f,0x74,0x6f,0x5f,0x72,0x67,0x62,0x61,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x76,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x66,0x72,0x61,0x63,0x74,0x28,0x76,
    0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x32,0x35,0x35,0x2e,0x30,0x2c,0x20,
    0x36,0x35,0x30,0x32,0x35,0x2e,0x30,0x2c,0x20,0x31,0x36,0x30,0x35,0x38,0x31,0x33,
    0x37,0x36,0x2e,0x30,0x29,0x20,0x2a,0x20,0x76,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x2d,0x5f,0x32,0x37,0x2e,0x79,0x7a,0x77,
    0x77,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x30,0x33,0x39,
    0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,
    0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,0x30,0x2e,0x30,
    0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,
    0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,
    0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,
    0x35,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x65,0x63,0x34,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x74,0x6f,0x5f,
    0x72,0x67,0x62,0x61,0x28,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x5f,0x74,0x6f,0x5f,0x72,0x67,0x62,0x61,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x70,0x6f,0x73,0x20,0x2f,0x20,0x76,0x65,0x63,
    0x33,0x28,0x64,0x65,0x70,0x74,0x68,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x74,0x6f,0x5f,0x72,0x67,0x62,0x61,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before depth.h"
#endif
static inline const sg_shader_desc* depth_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "v_pos";
      desc.vs.source = depth_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "depth_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = depth_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "depth_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.label = "depth_shader";
    }
    return &desc;
  }
  return 0;
}
