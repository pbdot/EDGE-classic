#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i blur.glsl -o shader_blur.h -l glsl410:hlsl4:glsl300es -b

    Overview:
    =========
    Shader program: 'blur':
        Get shader desc: blur_shader_desc(sg_query_backend());
        Vertex Shader: blur_vs
        Fragment Shader: blur_fs
        Attributes:
            ATTR_blur_v_position => 0
            ATTR_blur_v_uv => 1
    Bindings:
        Uniform block 'blur_params':
            C struct: blur_params_t
            Bind slot: UB_blur_params => 0
        Image 'SourceTexture':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT
            Multisampled: false
            Bind slot: IMG_SourceTexture => 0
        Sampler 'SourceSampler':
            Type: SG_SAMPLERTYPE_NONFILTERING
            Bind slot: SMP_SourceSampler => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before shader_blur.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_blur_v_position (0)
#define ATTR_blur_v_uv (1)
#define UB_blur_params (0)
#define IMG_SourceTexture (0)
#define SMP_SourceSampler (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct blur_params_t {
    int direction;
    float SampleWeights0;
    float SampleWeights1;
    float SampleWeights2;
    float SampleWeights3;
    float SampleWeights4;
    float SampleWeights5;
    float SampleWeights6;
} blur_params_t;
#pragma pack(pop)
/*
    #version 410

    layout(location = 0) in vec4 v_position;
    layout(location = 0) out vec2 TexCoord;
    layout(location = 1) in vec2 v_uv;

    void main()
    {
        gl_Position = v_position;
        TexCoord = v_uv;
    }

*/
static const uint8_t blur_vs_source_glsl410[200] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x76,0x5f,
    0x75,0x76,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 410

    struct blur_params
    {
        int direction;
        float SampleWeights0;
        float SampleWeights1;
        float SampleWeights2;
        float SampleWeights3;
        float SampleWeights4;
        float SampleWeights5;
        float SampleWeights6;
    };

    uniform blur_params _10;

    uniform sampler2D SourceTexture_SourceSampler;

    layout(location = 0) out vec4 FragColor;
    layout(location = 0) in vec2 TexCoord;

    void main()
    {
        if (_10.direction == 0)
        {
            FragColor = ((((((textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0)) * _10.SampleWeights0) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(1, 0)) * _10.SampleWeights1)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(-1, 0)) * _10.SampleWeights2)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(2, 0)) * _10.SampleWeights3)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(-2, 0)) * _10.SampleWeights4)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(3, 0)) * _10.SampleWeights5)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(-3, 0)) * _10.SampleWeights6);
        }
        else
        {
            FragColor = ((((((textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0)) * _10.SampleWeights0) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, 1)) * _10.SampleWeights1)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, -1)) * _10.SampleWeights2)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, 2)) * _10.SampleWeights3)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, -2)) * _10.SampleWeights4)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, 3)) * _10.SampleWeights5)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, -3)) * _10.SampleWeights6);
        }
    }

*/
static const uint8_t blur_fs_source_glsl410[1806] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x62,0x6c,0x75,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x64,0x69,0x72,0x65,0x63,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x33,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,
    0x69,0x67,0x68,0x74,0x73,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x35,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x36,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x62,0x6c,0x75,0x72,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x20,0x5f,0x31,0x30,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x53,0x6f,0x75,0x72,
    0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x30,0x2e,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,
    0x28,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,
    0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x30,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,
    0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x31,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,
    0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,
    0x74,0x73,0x31,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,
    0x65,0x63,0x32,0x28,0x2d,0x31,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,
    0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x32,
    0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,
    0x28,0x32,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x33,0x29,0x29,0x20,0x2b,
    0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,
    0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x2d,0x32,0x2c,
    0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x34,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,
    0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,
    0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x33,0x2c,0x20,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x35,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,
    0x69,0x76,0x65,0x63,0x32,0x28,0x2d,0x33,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,
    0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,
    0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,
    0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,
    0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,
    0x65,0x69,0x67,0x68,0x74,0x73,0x30,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,
    0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x31,0x29,0x29,0x20,0x2a,0x20,
    0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x31,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,
    0x63,0x32,0x28,0x30,0x2c,0x20,0x2d,0x31,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x32,0x29,
    0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,
    0x30,0x2c,0x20,0x32,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x33,0x29,0x29,0x20,0x2b,0x20,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,
    0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,
    0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x2d,
    0x32,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x34,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,
    0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x33,0x29,0x29,0x20,
    0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,
    0x68,0x74,0x73,0x35,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,
    0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x2d,0x33,0x29,0x29,0x20,0x2a,0x20,0x5f,
    0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,
    0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es

    layout(location = 0) in vec4 v_position;
    out vec2 TexCoord;
    layout(location = 1) in vec2 v_uv;

    void main()
    {
        gl_Position = v_position;
        TexCoord = v_uv;
    }

*/
static const uint8_t blur_vs_source_glsl300es[182] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x76,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    struct blur_params
    {
        int direction;
        highp float SampleWeights0;
        highp float SampleWeights1;
        highp float SampleWeights2;
        highp float SampleWeights3;
        highp float SampleWeights4;
        highp float SampleWeights5;
        highp float SampleWeights6;
    };

    uniform blur_params _10;

    uniform highp sampler2D SourceTexture_SourceSampler;

    layout(location = 0) out highp vec4 FragColor;
    in highp vec2 TexCoord;

    void main()
    {
        if (_10.direction == 0)
        {
            FragColor = ((((((textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0)) * _10.SampleWeights0) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(1, 0)) * _10.SampleWeights1)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(-1, 0)) * _10.SampleWeights2)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(2, 0)) * _10.SampleWeights3)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(-2, 0)) * _10.SampleWeights4)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(3, 0)) * _10.SampleWeights5)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(-3, 0)) * _10.SampleWeights6);
        }
        else
        {
            FragColor = ((((((textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0)) * _10.SampleWeights0) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, 1)) * _10.SampleWeights1)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, -1)) * _10.SampleWeights2)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, 2)) * _10.SampleWeights3)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, -2)) * _10.SampleWeights4)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, 3)) * _10.SampleWeights5)) + (textureOffset(SourceTexture_SourceSampler, TexCoord, ivec2(0, -3)) * _10.SampleWeights6);
        }
    }

*/
static const uint8_t blur_fs_source_glsl300es[1894] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x62,0x6c,0x75,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x64,0x69,0x72,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x36,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x62,0x6c,0x75,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,
    0x31,0x30,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x53,0x6f,0x75,
    0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,
    0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x46,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,0x2e,0x64,0x69,0x72,
    0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,
    0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,
    0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x30,
    0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x31,0x29,0x29,0x20,0x2b,0x20,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,
    0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,
    0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2c,0x20,
    0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x32,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,
    0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x32,0x2c,0x20,0x30,0x29,0x29,0x20,
    0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,
    0x68,0x74,0x73,0x33,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,
    0x76,0x65,0x63,0x32,0x28,0x2d,0x32,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,
    0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,
    0x34,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,
    0x32,0x28,0x33,0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x35,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,
    0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x2d,0x33,
    0x2c,0x20,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,
    0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x30,0x29,
    0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,
    0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,
    0x2c,0x20,0x31,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x31,0x29,0x29,0x20,0x2b,0x20,0x28,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,
    0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,
    0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,
    0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x2d,0x31,
    0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,
    0x65,0x69,0x67,0x68,0x74,0x73,0x32,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,
    0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x32,0x29,0x29,0x20,0x2a,
    0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,
    0x74,0x73,0x33,0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,
    0x65,0x63,0x32,0x28,0x30,0x2c,0x20,0x2d,0x32,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,
    0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x34,
    0x29,0x29,0x20,0x2b,0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,
    0x28,0x30,0x2c,0x20,0x33,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x35,0x29,0x29,0x20,0x2b,
    0x20,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x4f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x53,0x6f,
    0x75,0x72,0x63,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x30,0x2c,0x20,
    0x2d,0x33,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    static float4 gl_Position;
    static float4 v_position;
    static float2 TexCoord;
    static float2 v_uv;

    struct SPIRV_Cross_Input
    {
        float4 v_position : TEXCOORD0;
        float2 v_uv : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float2 TexCoord : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = v_position;
        TexCoord = v_uv;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        v_position = stage_input.v_position;
        v_uv = stage_input.v_uv;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.TexCoord = TexCoord;
        return stage_output;
    }
*/
static const uint8_t blur_vs_bytecode_hlsl4[528] = {
    0x44,0x58,0x42,0x43,0xf3,0x25,0xac,0x26,0x16,0x6c,0x31,0x27,0xf5,0xbf,0x35,0x11,
    0xa2,0xe3,0x81,0xb9,0x01,0x00,0x00,0x00,0x10,0x02,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0xcc,0x00,0x00,0x00,0x24,0x01,0x00,0x00,
    0x94,0x01,0x00,0x00,0x52,0x44,0x45,0x46,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xfe,0xff,
    0x10,0x81,0x00,0x00,0x1c,0x00,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x44,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x0f,0x00,0x00,0x38,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,
    0x50,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x38,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x0c,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x00,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x00,0xab,0xab,0xab,0x53,0x48,0x44,0x52,0x68,0x00,0x00,0x00,0x40,0x00,0x01,0x00,
    0x1a,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0xf2,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x32,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x32,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x32,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0xf2,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x1e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

};
/*
    cbuffer blur_params : register(b0)
    {
        int _10_direction : packoffset(c0);
        float _10_SampleWeights0 : packoffset(c0.y);
        float _10_SampleWeights1 : packoffset(c0.z);
        float _10_SampleWeights2 : packoffset(c0.w);
        float _10_SampleWeights3 : packoffset(c1);
        float _10_SampleWeights4 : packoffset(c1.y);
        float _10_SampleWeights5 : packoffset(c1.z);
        float _10_SampleWeights6 : packoffset(c1.w);
    };

    Texture2D<float4> SourceTexture : register(t0);
    SamplerState SourceSampler : register(s0);

    static float4 FragColor;
    static float2 TexCoord;

    struct SPIRV_Cross_Input
    {
        float2 TexCoord : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float4 FragColor : SV_Target0;
    };

    void frag_main()
    {
        if (_10_direction == 0)
        {
            FragColor = ((((((SourceTexture.Sample(SourceSampler, TexCoord, int2(0, 0)) * _10_SampleWeights0) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(1, 0)) * _10_SampleWeights1)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(-1, 0)) * _10_SampleWeights2)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(2, 0)) * _10_SampleWeights3)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(-2, 0)) * _10_SampleWeights4)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(3, 0)) * _10_SampleWeights5)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(-3, 0)) * _10_SampleWeights6);
        }
        else
        {
            FragColor = ((((((SourceTexture.Sample(SourceSampler, TexCoord, int2(0, 0)) * _10_SampleWeights0) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(0, 1)) * _10_SampleWeights1)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(0, -1)) * _10_SampleWeights2)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(0, 2)) * _10_SampleWeights3)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(0, -2)) * _10_SampleWeights4)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(0, 3)) * _10_SampleWeights5)) + (SourceTexture.Sample(SourceSampler, TexCoord, int2(0, -3)) * _10_SampleWeights6);
        }
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        TexCoord = stage_input.TexCoord;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.FragColor = FragColor;
        return stage_output;
    }
*/
static const uint8_t blur_fs_bytecode_hlsl4[2116] = {
    0x44,0x58,0x42,0x43,0x4a,0x25,0x46,0xca,0x0b,0xa5,0x9b,0x28,0xd7,0x93,0x67,0x6f,
    0xd6,0x00,0x51,0xba,0x01,0x00,0x00,0x00,0x44,0x08,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x98,0x02,0x00,0x00,0xcc,0x02,0x00,0x00,0x00,0x03,0x00,0x00,
    0xc8,0x07,0x00,0x00,0x52,0x44,0x45,0x46,0x5c,0x02,0x00,0x00,0x01,0x00,0x00,0x00,
    0xa4,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xff,0xff,
    0x10,0x81,0x00,0x00,0x32,0x02,0x00,0x00,0x7c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x8a,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x53,0x6f,0x75,0x72,0x63,0x65,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x00,0x53,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x00,0x62,0x6c,0x75,0x72,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x00,
    0x98,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xbc,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x8c,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x9c,0x01,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x08,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0xd3,0x01,0x00,0x00,0x0c,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xe6,0x01,0x00,0x00,0x10,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0xf9,0x01,0x00,0x00,0x14,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x02,0x00,0x00,0x18,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x1f,0x02,0x00,0x00,0x1c,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0xb0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0x31,0x30,0x5f,0x64,0x69,0x72,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x00,0xab,0xab,0x00,0x00,0x02,0x00,0x01,0x00,0x01,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0x31,0x30,0x5f,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x30,0x00,0xab,0x00,0x00,0x03,0x00,
    0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0x31,0x30,0x5f,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x31,0x00,0x5f,
    0x31,0x30,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,
    0x32,0x00,0x5f,0x31,0x30,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,
    0x68,0x74,0x73,0x33,0x00,0x5f,0x31,0x30,0x5f,0x53,0x61,0x6d,0x70,0x6c,0x65,0x57,
    0x65,0x69,0x67,0x68,0x74,0x73,0x34,0x00,0x5f,0x31,0x30,0x5f,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x35,0x00,0x5f,0x31,0x30,0x5f,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x36,0x00,0x4d,0x69,
    0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,
    0x20,0x53,0x68,0x61,0x64,0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,
    0x20,0x31,0x30,0x2e,0x31,0x00,0xab,0xab,0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,
    0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,
    0x53,0x48,0x44,0x52,0xc0,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x30,0x01,0x00,0x00,
    0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x5a,0x00,0x00,0x03,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x18,0x00,0x04,
    0x00,0x70,0x10,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,
    0x32,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x1f,0x00,0x00,0x04,
    0x0a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,
    0x01,0x00,0x00,0x00,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,0x01,0x02,0x00,0x00,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,
    0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0xa6,0x8a,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x56,0x85,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x01,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,0x01,0x1e,0x00,0x00,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0xf6,0x8f,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,0x01,0x04,0x00,0x00,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0x06,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,0x01,0x1c,0x00,0x00,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0x56,0x85,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,0x01,0x06,0x00,0x00,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0xa6,0x8a,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8a,0x01,0x1a,0x00,0x00,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0xf6,0x8f,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x01,0x45,0x00,0x00,0x8a,0x01,0x00,0x00,0x00,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x45,0x00,0x00,0x8a,0x01,0x20,0x00,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0xf2,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,0xa6,0x8a,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x56,0x85,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,
    0x45,0x00,0x00,0x8a,0x01,0xe0,0x01,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,0xf6,0x8f,0x20,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x45,0x00,0x00,0x8a,0x01,0x40,0x00,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,0x06,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x45,0x00,0x00,0x8a,0x01,0xc0,0x01,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,0x56,0x85,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x45,0x00,0x00,0x8a,0x01,0x60,0x00,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,0xa6,0x8a,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x45,0x00,0x00,0x8a,0x01,0xa0,0x01,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x01,0x00,0x00,0x00,0xf6,0x8f,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x15,0x00,0x00,0x01,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
};
static inline const sg_shader_desc* blur_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)blur_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)blur_fs_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "v_position";
            desc.attrs[1].glsl_name = "v_uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 32;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_10.direction";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_10.SampleWeights0";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_10.SampleWeights1";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_10.SampleWeights2";
            desc.uniform_blocks[0].glsl_uniforms[4].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[4].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[4].glsl_name = "_10.SampleWeights3";
            desc.uniform_blocks[0].glsl_uniforms[5].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[5].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[5].glsl_name = "_10.SampleWeights4";
            desc.uniform_blocks[0].glsl_uniforms[6].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[6].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[6].glsl_name = "_10.SampleWeights5";
            desc.uniform_blocks[0].glsl_uniforms[7].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[7].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[7].glsl_name = "_10.SampleWeights6";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "SourceTexture_SourceSampler";
            desc.label = "blur_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)blur_vs_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)blur_fs_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "v_position";
            desc.attrs[1].glsl_name = "v_uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 32;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_10.direction";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_10.SampleWeights0";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_10.SampleWeights1";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_10.SampleWeights2";
            desc.uniform_blocks[0].glsl_uniforms[4].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[4].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[4].glsl_name = "_10.SampleWeights3";
            desc.uniform_blocks[0].glsl_uniforms[5].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[5].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[5].glsl_name = "_10.SampleWeights4";
            desc.uniform_blocks[0].glsl_uniforms[6].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[6].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[6].glsl_name = "_10.SampleWeights5";
            desc.uniform_blocks[0].glsl_uniforms[7].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[7].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[7].glsl_name = "_10.SampleWeights6";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "SourceTexture_SourceSampler";
            desc.label = "blur_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.bytecode.ptr = blur_vs_bytecode_hlsl4;
            desc.vertex_func.bytecode.size = 528;
            desc.vertex_func.entry = "main";
            desc.fragment_func.bytecode.ptr = blur_fs_bytecode_hlsl4;
            desc.fragment_func.bytecode.size = 2116;
            desc.fragment_func.entry = "main";
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 32;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_UNFILTERABLE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].hlsl_register_t_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "blur_shader";
        }
        return &desc;
    }
    return 0;
}
